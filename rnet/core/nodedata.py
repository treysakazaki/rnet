from dataclasses import dataclass
from typing import Callable, Generator
try:
    from qgis.core import QgsFeature
except:
    pass
from rnet.core.vertexdata import (
    Vertex2d,
    Vertex3d,
    VertexData,
    VertexLayer
    )
from rnet.core.layer import GpkgData


__all__ = ['Node2d', 'Node3d', 'NodeData', 'NodeLayer']


@dataclass
class Node2d(Vertex2d):
    '''
    Data class representing two-dimensional nodes.
    
    Parameters
    ----------
    id : int
        Node ID.
    x : float
        `x`-coordinate.
    y : float
        `y`-coordinate.
    '''
    pass


@dataclass
class Node3d(Vertex3d):
    '''
    Data class representing three-dimensional nodes.
    
    Parameters
    ----------
    id : int
        Vertex ID.
    x : float
        `x`-coordinate.
    y : float
        `y`-coordinate.
    z : float
        `z`-coordinate.
    '''
    pass


class NodeData(VertexData):
    
    def __init__(self, df, layer=None):
        super().__init__(df)
    
    @classmethod
    def from_gpkg(cls, gpkg, layername='nodes'):
        '''
        Instantiates :class:`NodeData` from a GeoPackage layer.
        
        Parameters
        ----------
        gpkg : :class:`GpkgData` or str
            :class:`GpkgData` object or path specifying the GeoPackage
            containing the node data.
        layername : str, optional
            Name of the layer containing the node data. The default is
            'nodes'.
        
        Returns
        -------
        :class:`NodeData`
        '''
        if type(gpkg) is str:
            gpkg = GpkgData(gpkg)
        elif isinstance(gpkg, GpkgData):
            pass
        else:
            raise TypeError("arg 'gpkg' expected type 'str' or 'GpkgData'")
        return cls._from_layer(NodeLayer(gpkg.sublayer(layername)))
    
    @classmethod
    def from_ml(cls, layername='nodes'):
        '''
        Instantiates :class:`NodeData` from map layer with specified name.
        
        Parameters
        ----------
        layername : str, optional
            Layer name. The default is 'nodes'.
        
        Returns
        -------
        :class:`NodeData`
        
        Raises
        ------
        ValueError
            If the project contains multiple layers with the specified name.
        '''
        return super().from_ml(layername)
    
    def generate(self, report: Callable[[float], None] = lambda x: None
                 ) -> Generator[QgsFeature, None, None]:
        '''
        Yields node features with point geometry and attributes 'id', 'x',
        and 'y'.
        
        Parameters
        ----------
        report : Callable[[float], None], optional
            Function for reporting generator progress.
        
        Yields
        ------
        :class:`qgis.core.QgsFeature`
        '''
        N = len(self.df)
        for i, node in enumerate(self.nodes(), 1):
            report(i/N*100)
            yield node.feature(i)
    
    def nodes(self):
        '''
        Yields nodes in the data set.
        
        Yields
        ------
        :class:`Node2d` or :class:`Node3d`
        '''
        if self.dims == 2:
            for id, row in self.df.iterrows():
                yield Node2d(id, *list(row))
        elif self.dims == 3:
            for id, row in self.df.iterrows():
                yield Node3d(id, *list(row))
    
    def render(self, groupname: str = '', index: int = 0, **kwargs) -> None:
        '''
        Renders a newly created vector layer that is populated with node
        features. The existing layer is overwritten.
        
        Parameters
        ----------
        groupname : :obj:`str`, optional
            Name of group to which the new layer is inserted. The default is
            ''.
        index : :obj:`int`, optional
            Index within the group to which the layer is inserted. The default
            is 0.
        
        Keyword arguments
        -----------------
        **kwargs : :obj:`dict`, optional
            Keyword arguments that are used to define the renderer settings.
        
        See also
        --------
        :meth:`NodeLayer.renderer`
            Returns renderer for the vertex layer.
        '''
        if self.layer is None:
            self.layer = NodeLayer.create(self.crs.epsg, self.dims)
            self.layer.render(**kwargs)
        self.layer.populate(self.generate)
        if len(kwargs) > 0:
            self.layer.render(**kwargs)
        self.layer.add(groupname, index)
    
    def to_gpkg(self, gpkg, layername='nodes'):
        '''
        Saves node features to a GPKG layer. If there exists a
        :class:`NodeLayer` associated with the instance, then the contents
        of the layer are saved. Otherwise, features generated by the
        :meth:`generate` method are saved.
        
        Parameters
        ----------
        gpkg : :class:`GpkgData` or str
            :class:`GpkgData` object or path specifying the GPKG layer to which
            vertices will be saved.
        layername : str, optional
            Name of the GPKG layer to which vertices are saved. The default
            is 'nodes'.
        '''
        if type(gpkg) is str:
            gpkg = GpkgData(gpkg)
        elif isinstance(gpkg, GpkgData):
            pass
        else:
            raise TypeError("expected 'str' or 'GpkgData' for argument 'gpkg'")
        
        if self.layer is None:
            gpkg.write_features(layername, self.generate, self.crs,
                                NodeLayer.fields, 'point')
        else:
            self.layer.save(gpkg, layername)


class NodeLayer(VertexLayer):
    '''
    Class for representing a node layer.
    '''
    
    @classmethod
    def create(cls, crs: int, dims: int, layername: str = 'nodes'):
        return super().create(crs, dims, layername)
    
    @classmethod
    def renderer(cls, **kwargs):
        kwargs.setdefault('color', (162,212,24))
        return super().renderer(**kwargs)
